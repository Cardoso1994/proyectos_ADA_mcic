#+TITLE: Proyectos - Diseño y Análisis de Algoritmos
#+author: Marco Antonio Cardoso Moreno

#+STARTUP:  CONTENT


* Información general
- Asignatura :: Diseño y Análisis de Algoritmos
- Docente :: Dr. Rolando Quintero Téllez
- Maestría :: Maestría en Ciencias en Ingeniería de Cómputo
- Alumno :: Marco Antonio Cardoso Moreno

* Especificaciones
** Proyecto 05 - Algoritmos de árbol de expansión mínima

** Proyecto 04 - Algoritmos de árbol de expansión mínima
Utilizando la biblioteca de grafos desarrollada en el proyecto 1, implementar
los algoritmos de Kruskal (directo e inverso) y Prim de tal forma que calculen
el árbol de expansión mínima; es decir, desarrollar los métodos en la clase
Grafo:
- =def KruskalD(self):=
- =def KruskalI(self):=
- =def Prim(self):=

** Proyecto 03
Algoritmo de Dijkstra
Utilizando la biblioteca de grafos desarrollada en el proyecto 1, implementar el algoritmo de Dijkstra de tal forma que dado un nodo fuente (s), calculen el árbol de caminos más cortos; es decir, desarrollar el método en la clase Grafo:
- =def Dijkstra(self, s)=

** Proyecto 02
Utilizando la biblioteca de grafos desarrollada en el proyecto 1, implementar
los algoritmos BFS y DFS (recursivo e iterativo) de tal forma que dado un nodo
fuente (s), calculen el árbol inducido por los algoritmos mencionados; es decir,
desarrollar los métodos en la clase Grafo:
- =def BFS(self, s)=
- =def DFS_R(self, s)=
- =def DFS_I(self, s)=

** Proyecto 01
Escribir una biblioteca orientada a objetos, en Python 3.6, para describir y
utilizar grafos. Debe, por lo menos contar con una clase llamada Grafo, una
clase llamada Nodo y una clase llamada Arista. Asimismo, se deben realizar
funciones para generar grafos con los siguientes modelos de generación:
- Malla
- Erdos y Rényi
- Gilbert
- Geográfico
- Barabási-Albert
- Dorogovtsev-Mendes

* Imágenes - Resultados
* Malla
** 100 nodos
+ m :: 10
+ n :: 10
+ [[https://youtu.be/zisJhrQYE_U][Video en YT]]
[[./img/100/grafo_malla.png]]
** 500 nodos
+ m :: 20
+ n :: 25
+ [[https://youtu.be/9FFDIV_eud0][Video en YT]]
[[./img/500/grafo_malla.png]]

* Erdos Renyi
** 100 nodos
+ n :: 100
+ m :: 1020
+ [[https://youtu.be/uYVE8m2L-Qo][Video en YT]]
[[./img/100/grafo_erdos.png]]
** 500 nodos
+ n :: 500
+ m :: 3500
+ [[https://youtu.be/siPaYLMaeCQ][Video en YT]]
[[./img/500/grafo_erdos.png]]

* Gilbert
** 100 nodos
+ n :: 100
+ p :: 0.15
+ [[https://youtu.be/eDnaWLL7oDg][Video en YT]]
[[./img/100/grafo_gilbert.png]]

** 500 nodos
+ n :: 500
+ p :: 0.05
+ [[https://youtu.be/4FBydKvxTOg][Video en YT]]
[[./img/500/grafo_gilbert.png]]
* Geográfico
** 100 nodos
+ n :: 100
+ r :: 0.3
+ [[https://youtu.be/LJpnkUewdxU][Video en YT]]
[[./img/100/grafo_geo.png]]

** 500 nodos
+ n :: 500
+ r :: 0.15
+ [[https://youtu.be/0jM7uBdxz8E][Video en YT]]
[[./img/500/grafo_geo.png]]

* Barabasi
** 100 nodos
+ n :: 100
+ d :: 5
+ [[https://youtu.be/wx9Nymuo7Ok][Video en YT]]
[[./img/100/grafo_barabasi.png]]

** 500 nodos
+ n :: 500
+ d :: 4
+ [][Video en YT]]
[[./img/500/grafo_barabasi.png]]

* Dorogovtsev
** 100 nodos
+ [[https://youtu.be/BJGTYutK2ZM][Video en YT]]
[[./img/100/grafo_dorog.png]]

** 500 nodos
+ [https://youtu.be/BJGTYutK2ZM][Video en YT]]
[[./img/500/grafo_dorog.png]]

* Dependencias
- Lenguaje :: Python
  + Versión :: 3.6.7
